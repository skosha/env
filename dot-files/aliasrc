#!/bin/bash

# Fix for using Ctrl-S in Vim
stty -ixon

# Use gls instead of ls
alias ls='ls --color'

# some more ls aliases
alias ll='ls -alFX'         # Sort by type
alias la='ls -AX'           # Sort by type
alias lt='ls -lt'           # Sort by date
alias l='ls -CF'            # Useful for passing to pager

# refresh shell
alias reload='source ~/.bashrc'

# Always list the pid for bg jobs
alias jobs="jobs -l"

# My git aliases
alias gitl='git log --name-only'            # full log with filenames
alias g-ls='git ls-files'                   # list files in git
alias go-ls='git ls-files -o --directory'   # list only directories part of git
alias st='git status'                       # short for status
alias gs-diff='git diff --staged'           # diff staged files (git diff is for unstaged files only and git show for commited files)
alias pull='git pull --rebase'              # pull with rebase
alias r-pull='git pull --rebase origin'     # pull with rebase to origin
alias push='git push'                       # short for push
alias co='git checkout'                     # short for checkout
alias br='git --no-pager branch -vv'        # short for listing branches
alias n-br='git checkout -b'                # create and checkout a new branch
alias commit='git commit'                   # short for commit
alias a-commit='git commit --amend'         # re-commit the same commit with editing the commit message
alias ae-commit='git commit --amend --no-edit'  # re-commit the same commit without editing the commit message
alias add='git add'                         # short for add
alias stash='git stash'                     # short for stash
alias save='git stash save -u'              # short for saving to a new stash (untracked files as well)
alias a-stash='git stash apply $(git stash list | fzf +m -1 -0| cut -d':' -f1)'     # choose a stash to apply from a list
alias d-stash='git stash drop $(git stash list | fzf +m -1 -0 | cut -d':' -f1)'     # choose a stash to delete from a list
alias s-stash='git show $(git stash list | fzf +m -1 -0 | cut -d':' -f1)'           # show a stash from a list
alias flog='git log --graph --abbrev-commit --decorate --all --format=format:"%C(bold blue)%h%C(reset) - %C(bold cyan)%cD%C(dim white) - %an%C(reset) %C(bold green)(%cr)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)"'
alias g-patch='git format-patch -1'         # create a patch
alias a-patch='git am <'                    # apply a patch
alias l-merge='git merge $(git --no-pager branch | fzf +m -1 -0)'       # local merge from a list of branches
alias r-merge='git merge --no-ff $(git --no-pager branch | fzf +m -1 -0)'   # no-ff merge from a list of branches
alias d-commit='git reset --hard HEAD^'     # delete the head commit (hard)
alias r-commit='git reset --soft HEAD^'     # delete the head commit and update the workspace to changes
alias s-update='git submodule update --remote'  # submodule update
alias cont-rebase='git add . && git rebase --continue'   # Continue rebase after adding all conflict resolutions
alias abt-rebase='git rebase --abort'       # Abort rebase
alias cont-cp='git add . && git cherry-pick --continue'  # Continue cherry-pick after adding all conflict resolutions
alias abt-cp='git cherry-pick --abort'      # Abort cherry-pick

# Grep aliases
alias grep='grep --exclude="tags" --exclude="cscope.out" --color=auto'  # do not include tags and cscope when searching
alias grepo='grep --exclude=\*.{bin,out,t32,elf,o,a,map,git,rst}'       # exclude all output files from search

## Colorize the grep command output for ease of use (good for log files)##
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# Make mount command output pretty and human readable format
alias mount='mount | column -t'

# Resume wget by default
alias wget='wget -c'

# Moving around
alias ..='cd ..'
alias .2='cd ../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../../'

# Finding stuff!
alias fd='find . -type d -iname'        # find only directories
alias ff='find . -type f -iname'        # find only files

# OSX specific aliases
unamestr=`uname`
if [[ "$unamestr" == 'Darwin' ]]; then
    # Check for macOS updates
    alias upc='softwareupdate -l'

    # Download and install macOS updates
    alias upd='softwareupdate -i -a'

    # Get macOS Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages
    alias update='sudo softwareupdate -i -a; brew update; brew upgrade; brew cleanup; sudo gem updat --system; sudo gem update; sudo gem cleanup'

    # Show/hide hidden files in Finder
    alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
    alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

    # Time functions
    alias nowtime='date +"%T"'
    alias nowdate='date +"%d-%m-%Y"'
    alias now='nowtime && nowdate'

    # hibernation and sleep settings
    alias hibernate='sudo pmset -a hibernatemode 25'
    alias sleep='sudo pmset -a hibernatemode 0'
    alias safesleep='sudo pmset -a hibernatemode 3'
    alias smartsleep='sudo pmset -a hibernatemode 2'
fi

# Make and cd to the directory
unalias mkcd 2>/dev/null
mkcd () {
    mkdir "$1"
    cd "$1"
}

# Kill process
unalias fkill 2>/dev/null
fkill() {
    pid=$(ps -ef | sed 1d | fzf --cycle -m | awk '{print $2}')
    if [ "x$pid" != "x" ]
    then
        kill -${1:-9} $pid
    fi
}

########################################## git functions

# Grep a git branch for pattern in commit message
# git-grep <pattern>
unalias git-grep 2>/dev/null
git-grep() {
    git log --grep="$1"
}

unalias git-show 2>/dev/null
git-show() {
	local sha
    [[ ! -z "$1" ]] &&
	sha=$(git log --grep="$1" | head -n 1 | awk '{print $2}') &&
	[[ ! -z "$sha" ]] && git show "$sha"
}

unalias del-change 2>/dev/null
del-change() {
	local c_sha
    [[ ! -z "$1" ]] &&
	c_sha=$(git log --grep="$1" | head -n 1 | awk '{print $2}') &&
	[[ ! -z "$c_sha" ]] && git rebase --onto "$c_sha"^ "$c_sha"
}

# Add selected files to staged (select using shift-tab)
unalias f-add 2>/dev/null
f-add() {
    git add $(git status -s | fzf --multi -1 -0 | awk '{print $2}')
}

# remove selected files from staged (select using shift-tab)
unalias r-file 2>/dev/null
r-file() {
    git reset HEAD $(git status -s | fzf --multi -1 -0 | awk '{print $2}')
}

# revert file(s) changes in current workspace, supply a filename or select from a list of file(s) (can select multiple)
unalias gf-revert 2>/dev/null
gf-revert() {
    if [ ! -n "$1" ]; then
        git checkout $(git status -s | fzf --multi | awk '{print $2}')
    else
        git checkout "$1"
    fi
}

# checkout a branch selected from a list of local branches
unalias ci 2>/dev/null
ci() {
    local branch
    branch=$(git --no-pager branch -vv | fzf +m -1 -0 | awk '{print $1}')
    git checkout $branch
}

# choose from a list of branches to rebase to
unalias rebase 2>/dev/null
rebase() {
    local branch
    branch=$(git --no-pager branch -vv | fzf +m -1 -0 | awk '{print $1}')
    git rebase $branch
}

# delete a branch selected from a list of local branches
unalias b-del 2>/dev/null
b-del() {
    local branch
    branch=$(git --no-pager branch -vv | fzf +m -1 -0 | awk '{print $1}')
    git branch -D $branch
}

# create and checkout a new tracking branch selected from a list of remote branches
unalias r-br 2>/dev/null
r-br() {
    local branch
    branch=$(git --no-pager branch -r | fzf +m) && #get the branch name to checkout
    branch=$(echo "$branch" | awk '$1=$1') && #remove extra spaces
    remote=$(echo "$branch" | cut -d'/' -f1) && #get the remote
    target=$(echo "$branch" | cut -d'/' -f2) && #get the remote target branch
    git checkout -b $target --track $remote/$target
}

# Delete a remote branch selected from a list of remote branches
unalias r-del 2>/dev/null
r-del() {
    local branch
    branch=$(git --no-pager branch -r | fzf +m) && #get the branch name to checkout
    branch=$(echo "$branch" | awk '$1=$1') && #remove extra spaces
    remote=$(echo "$branch" | cut -d'/' -f1) && #get the remote
    target=$(echo "$branch" | cut -d'/' -f2) && #get the remote target branch
    git push $remote --delete $target
}

# diff a selected commit with its previous commit
unalias c-diff 2>/dev/null
c-diff() {
    local c_sha
    c_sha=$(git log --pretty=format:"%h  %ad%x09%cd  %<(20)%cr%<(40trunc)%an%s" --date=short | fzf +m -1 -0 | cut -d' ' -f1) &&
    git diff $c_sha~ $c_sha
}

# delete a selected commit completely
unalias c-del 2>/dev/null
c-del() {
    local c_sha
    c_sha=$(git log --pretty=format:"%h  %ad%x09%cd  %<(20)%cr%<(40trunc)%an%s" --date=short | fzf +m | cut -d' ' -f1) &&
    git rebase --onto $c_sha^ $c_sha
}

# delete a tag locally and remotely
unalias d-tag 2>/dev/null
d-tag() {
    local tag
    tag=$(git tag | fzf-tmux +multi -1 -0 ) &&
    git push --delete origin $tag &&
    git tag -d $tag
}

# Export a stash to a patch
unalias e-stash 2>/dev/null
e-stash() {
	local str index name
	str=$(git stash list | fzf +m -1 -0) &&
	index=$(echo "$str" | cut -d':' -f1) &&
	name=$(echo "$str" | cut -d' ' -f4) &&
	git stash show -p $index > $name.patch && # export a stash as patch file
	echo "exported to $name.patch"
}

# tig like stash viewer
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
unalias f-stash 2>/dev/null
f-stash() {
    local out q k sha
    while out=$(
        git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
        fzf --ansi --no-sort --query="$q" --print-query \
            --expect=ctrl-d,ctrl-b);
    do
        mapfile -t out <<< "$out"
        q="${out[0]}"
        k="${out[1]}"
        sha="${out[-1]}"
        sha="${sha%% *}"
        [[ -z "$sha" ]] && continue
        if [[ "$k" == 'ctrl-d' ]]; then
            git diff $sha
        elif [[ "$k" == 'ctrl-b' ]]; then
            git stash branch "stash-$sha" $sha
            break;
        else
            git stash show -p $sha
        fi
    done
}

# Delete a file from a commit
# Note: requires the workspace to be clean, otherwise commits all the unstaged changes as well
unalias df-commit 2>/dev/null
df-commit() {
    local file
    file=$(git show --pretty="" --name-only --relative=$(basename $PWD) HEAD | fzf +m) &&
    git checkout HEAD~ $file &&
    git commit -a --amend --no-edit
}

# cherry-pick selected commit from $1 branch by creating a new branch
# new branch name is derived from first word of commit message + "_$2"
# Example: cp_into dev c4
unalias cp_into 2>/dev/null
cp_into() {
    [[ ! -z "$1" ]] &&
    [[ ! -z "$2" ]] &&
    c_sha=$(git log --pretty=format:"%h  %ad%x09%cd  %<(20)%cr%<(40trunc)%an%s" --date=short $1 | fzf +m -1 -0 | cut -d' ' -f1) &&
    c_name=$(git show --oneline $c_sha | head -n 1 | awk -F '[ : ]' '{print $2}') &&
    git checkout -b "${c_name}_${2}" &&
    git cherry-pick $c_sha
}

# cherry-pick selected commit from selected branch to new branch <firm_name>_<$1> off of the current branch
# Example: cp_into_br c5
unalias cp_into_br 2>/dev/null
cp_into_br() {
    local src_br c_sha
    [[ ! -z "$1" ]] &&
    src_br=$(git --no-pager branch -vv | fzf +m -1 -0 --header 'Select source branch' | awk '{print $1}') || return
    c_sha=$(git log --pretty=format:"%h  %ad%x09%cd  %<(20)%cr%<(40trunc)%an%s" --date=short $src_br | fzf +m -1 -0 | cut -d' ' -f1) &&
    c_name=$(git show --oneline $c_sha | head -n 1 | awk -F '[ : ]' '{print $2}') &&
    git checkout -b "${c_name}_${1}" &&
    git cherry-pick $c_sha
}

# cherry-pick selected commit from $1 to the current branch
# Example: cp_from dev
unalias cp_from 2>/dev/null
cp_from() {
    [[ ! -z "$1" ]] &&
    c_sha=$(git log --pretty=format:"%h  %ad%x09%cd  %<(20)%cr%<(40trunc)%an%s" --date=short $1 | fzf +m -1 -0 | cut -d' ' -f1) &&
    git cherry-pick $c_sha
}

# cherry-pick selected commit from selected branch to the selected branch
# Example: cp_from_to
# Select src branch, destination branch, and commit to be cherry-picked
unalias cp_from_to 2>/dev/null
cp_from_to() {
    local src_br dest_br c_sha
    src_br=$(git --no-pager branch -vv | fzf +m -1 -0 --header 'Select source branch' | awk '{print $1}') || return
    dest_br=$(git --no-pager branch -vv | fzf +m -1 -0 --header 'Select destination branch' | awk '{print $1}') || return
    c_sha=$(git log --pretty=format:"%h  %ad%x09%cd  %<(20)%cr%<(40trunc)%an%s" --date=short $src_br | fzf +m -1 -0 --header 'Select commit to cherry-pick' | cut -d' ' -f1) &&
    git cherry-pick $c_sha
}

unalias cp_from_firm 2>/dev/null
cp_from_firm() {
    local src_br c_sha
    src_br=$(git --no-pager branch -vv | fzf +m -1 -0 --header 'Select source branch' | awk '{print $1}') || return
    [[ ! -z "$1" ]] &&
	c_sha=$(git log $src_br --grep="$1" | head -n 1 | awk '{print $2}') &&
	[[ ! -z "$c_sha" ]] && git cherry-pick $c_sha
}

# cherry-pick selected commit from selected branch to the current branch
# Example: cp_from_br
unalias cp_from_br 2>/dev/null
cp_from_br() {
    local src_br c_sha
    src_br=$(git --no-pager branch -vv | fzf +m -1 -0 --header 'Select source branch' | awk '{print $1}') || return
    c_sha=$(git log --pretty=format:"%h  %ad%x09%cd  %<(20)%cr%<(40trunc)%an%s" --date=short $src_br | fzf +m -1 -0 | cut -d' ' -f1) &&
    git cherry-pick $c_sha
}

# cherry-pick $1 by creating a new branch
# new branch name is derived from first word of commit message + "_$2"
# Example: cp_sha <sha> c4
unalias cp_sha 2>/dev/null
cp_sha() {
    [[ ! -z "$1" ]] &&
    [[ ! -z "$2" ]] &&
    c_name=$(git show --oneline $1 | head -n 1 | awk -F '[ : ]' '{print $2}') &&
    git checkout -b "${c_name}_${2}" &&
    git cherry-pick $1
}

# fcs - get git commit sha
# example usage: git rebase -i `fcs`
unalias fcs 2>/dev/null
fcs() {
    local commits commit
    commit=$(git log --pretty=format:"%h  %ad%x09%cd  %<(20)%cr%<(40trunc)%an%s" --date=short $1 | fzf +m -1 -0 | cut -d' ' -f1) &&
    echo -n "$commit"
}

# fco - checkout git branch/tag (remote/local)
unalias fco 2>/dev/null
fco() {
    local tags branches target
    tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
    branches=$(
    git branch --all | grep -v HEAD             |
        sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
        sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
    target=$(
    (echo "$tags"; echo "$branches") |
        fzf-tmux -l30 -- --no-hcycle --ansi +m -d "\t" -n 2) || return
    git checkout $(echo "$target" | awk '{print $2}')
}

# fcoc - checkout git commit
unalias fcoc 2>/dev/null
fcoc() {
    local commit=$(fcs)
    [[ -n "$commit"  ]] && git checkout "$commit"
}

unalias log_since 2>/dev/null
log_since() {
    local to_commit="HEAD"
    [[ ! -z "$2" ]] && to_commit="$2"
    [[ ! -z "$1" ]] &&
    git log --pretty=format:'%h  %ad%x09%cd  %<(20)%cr%<(40trunc)%an%s' --date=short "$1".."$to_commit"^
}

# find-in-file - usage: fif <SEARCH_TERM>
unalias fif 2>/dev/null
fif() {
    if [ ! "$#" -gt 0  ]; then
        echo "Need a string to search for!";
        return 1;
    fi
    rg --files-with-matches --no-messages "$1" | fzf $FZF_PREVIEW_WINDOW --preview "rg --ignore-case --pretty --context 10 '$1' {}"
}
